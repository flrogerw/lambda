{
  "name": "dispatch-recursive",
  "version": "1.0.2",
  "description": "Recursive command dispatch.",
  "repository": {
    "type": "git",
    "url": "git://github.com/CascadeEnergy/dispatch-recursive"
  },
  "author": {
    "name": "Will Vaughn",
    "email": "willieviseoae@gmail.com"
  },
  "license": "MIT",
  "main": "es5/index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "./node_modules/.bin/gulp coverage"
  },
  "bugs": {
    "url": "https://github.com/CascadeEnergy/dispatch-recursive/issues"
  },
  "homepage": "https://github.com/CascadeEnergy/dispatch-recursive#readme",
  "devDependencies": {
    "babel": "^5.2.17",
    "gulp": "^3.8.11",
    "gulp-babel": "^5.1.0",
    "gulp-istanbul": "^0.9.0",
    "gulp-jscs": "^1.6.0",
    "gulp-jshint": "^1.10.0",
    "gulp-mocha": "^2.0.1",
    "gulp-plumber": "^1.0.0",
    "isparta": "^3.0.3",
    "jshint-stylish": "^1.0.2",
    "mocha": "^2.2.4",
    "require-dir": "^0.3.0",
    "sinon": "^1.15.4"
  },
  "dependencies": {
    "babel-runtime": "^5.2.17",
    "lodash": "^3.10.1"
  },
  "readme": "# dispatch-recursive [![Build Status](https://travis-ci.org/CascadeEnergy/dispatch-recursive.svg?branch=master)](https://travis-ci.org/CascadeEnergy/dispatch-recursive)\n\n> Recursive command dispatch.\n\n## Install\n\n```\n$ npm install --save dispatch-recursive\n```\n\n## What is Dispatch?\n\nThis module provides a way to construct a function which loops through a list of \"command\" functions, and calls\neach with a \"target\" value until one of the commands returns a value other than `undefined`.\nThe command functions are polymorphic and adhere to the same interface. The point of dispatch\nis to simplify delegating to concrete command implementations.\n\nThe reason this is called \"recursive dispatch\" is because the contract of each command function is\n`(target, fn)` where `fn` is the function returned by dispatch. This allows each command to apply the dispatch\nchain to sub properties of the target.\n\nThere is also a similar module for performing dispatch non recursively, which forwards all arguments given to the\nresultant function to be forwarded to each command called [dispatch-fn](https://github.com/CascadeEnergy/dispatch-fn).\n\nIn addition, we can exploit the contract of dispatch commands to compose a terminating \nfunction that provides some default behavior by always returning a value or one that always\nthrows an exception.\n\nThis pattern is sometimes also referred to as *Chain of Command*\n\nImplementation of this module was heavily inspired by Chapter 5 of\n*Functional Javascript: Introducing Functional Programming with Underscore.js* by Michael Fogus.  \nPublished by O'reilly Media (2013-06-01)  \n[Book Source - Chapter 5](https://github.com/funjs/book-source/blob/master/chapter05.js)\n\n## Usage\n\nThis example shows how you could use dispatch to construct a `rev` function. The behavior of `rev`\nchanges depending on what type of object it is given.\n\n```javascript\n'use strict';\n\nvar isArray = require('lodash/lang/isArray');\nvar isPlainObject = require('lodash/lang/isPlainObject');\nvar isString = require('lodash/lang/isString');\nvar mapValues = require('lodash/object/mapValues');\nvar dispatch = require('../es5');\n\nvar rev = dispatch(\n  reverseString,\n  reverseArray,\n  reverseObjectProperties,\n  irreversible\n);\n\nfunction reverseString(target) {\n  if (isString(target)) {\n    return target.split('').reverse().join('');\n  }\n\n  return undefined;\n}\n\nfunction reverseArray(target, rev) {\n  // Recursion!!!\n  // Reverses each member of the array, and then reverses the whole array.\n  if (isArray(target)) {\n    return target.map(rev).reverse();\n  }\n\n  return undefined;\n}\n\nfunction reverseObjectProperties(target, rev) {\n  // Recursion!!!\n  // Original rev function is used to transform the next layer\n  // of object properties.\n  if (isPlainObject(target)) {\n    return mapValues(target, rev);\n  }\n\n  return undefined;\n}\n\n// If the target hasn't been caught by any rev commands\n// it will fall through to this function which does nothing\n// but return the original value passed in.\n// This is us exploiting the command interface to provide default\n// fall through behavior in the dispatch chain.\nfunction irreversible(target) {\n  return target;\n}\n\nconsole.log(rev(42)); // 42\n\nconsole.log(rev('abc')); // 'cba'\n\nconsole.log(rev(['a', 'b', 'c'])); // [ 'c', 'b', 'a' ]\n\nconsole.log(rev([['c', 'b', 'a'], 'oof', 32, null, {foo: 'rab'}]));\n// [ { foo: 'bar' }, null, 32, 'foo', [ 'a', 'b', 'c' ] ]\n\nconsole.log(\n  rev(\n    {\n      beep: ['p', 'o', 'o', 'b'],\n      nested: {\n        nope: null,\n        abc: 'cba',\n        abcArr: ['c', 'b', 'a']\n      },\n      missed: 0\n    }\n  )\n);\n//{\n//  beep: [ 'b', 'o', 'o', 'p' ],\n//  nested: {\n//    nope: null,\n//    abc: 'abc',\n//    abcArr: [ 'a', 'b', 'c' ]\n//  },\n//  missed: 0\n//}\n```\n",
  "readmeFilename": "README.md",
  "_id": "dispatch-recursive@1.0.2",
  "dist": {
    "shasum": "ec991591e0f18f920c285a48a5016294c37ecde6"
  },
  "_from": "dispatch-recursive@^1.0.2",
  "_resolved": "https://registry.npmjs.org/dispatch-recursive/-/dispatch-recursive-1.0.2.tgz"
}
